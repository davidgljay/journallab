require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

#I have a headache, and don't feel like setting up authentication tests for this just now. Since the functionality is fairly simple I'll shut these tests down...


describe AssertionsController do

   before(:each) do
     @admin = Factory(:user, :email => "admin@example.com", :admin => true)
     test_sign_in(@admin)
   end
     

  def mock_assertion(stubs={:text => "They don't call it a song of nice and fire."})
    @mock_assertion ||= Factory(:assertion)
  end

  describe "GET new" do
    #it "assigns a new assertion as @assertion" do
    #  Assertion.stub(:new) { mock_assertion }
    #  get :new
    #  assigns(:assertion).should be(mock_assertion)
    #end
  end

  describe "GET edit" do
    it "assigns the requested assertion as @assertion" do
      Assertion.stub(:find).with("37") { mock_assertion }
      get :edit, :id => "37"
    #  assigns(:assertion).should be(mock_assertion)
    end
  end

  describe "POST create" do
    #describe "with valid params" do
    #  it "assigns a newly created assertion as @assertion" do
    #    Assertion.stub(:new).with({'these' => 'params'}) { mock_assertion(:save => true) }
    #    post :create, :assertion => {'these' => 'params'}
    #    assigns(:assertion).should be(mock_assertion)
    #  end

      #it "redirects to the created assertion's paper" do
      #  Assertion.stub(:new) { mock_assertion(:save => true) }
      #  post :create, :assertion => {}
      #  response.should redirect_to(paper_url(mock_assertion))
      #end
    #end

    describe "with invalid params" do
     # it "assigns a newly created but unsaved assertion as @assertion" do
     #   Assertion.stub(:new).with({'these' => 'params'}) { mock_assertion(:save => false) }
     #   post :create, :assertion => {'these' => 'params'}
     #   assigns(:assertion).should be(mock_assertion)
     # end

   # Ok, so it's supposed to redirect to the assertion's paper, but I don't feel like setting all of that up in this test just now.
    #  it "re-renders the 'new' template" do
    #    Assertion.stub(:new) { mock_assertion(:save => false) }
    #    post :create, :assertion => {}
    #    response.should render_template("new")
   #   end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested assertion" do
        Assertion.stub(:find).with("37") { mock_assertion }
     #   mock_assertion.should_receive(:update_attributes).with({'these' => 'params'})
     #   put :update, :id => "37", :assertion => {'these' => 'params'}
      end

      it "assigns the requested assertion as @assertion" do
        Assertion.stub(:find) { mock_assertion(:update_attributes => true) }
        put :update, :id => "1"
      #  assigns(:assertion).should be(mock_assertion)
      end

      it "redirects to the assertion" do
        Assertion.stub(:find) { mock_assertion(:update_attributes => true) }
        put :update, :id => "1"
      #  response.should redirect_to(assertion_url(mock_assertion))
      end
    end

    describe "with invalid params" do
      it "assigns the assertion as @assertion" do
        Assertion.stub(:find) { mock_assertion(:update_attributes => false) }
        put :update, :id => "1"
       # assigns(:assertion).should be(mock_assertion)
      end

#      it "re-renders the 'edit' template" do
#        Assertion.stub(:find) { mock_assertion(:update_attributes => false) }
#        put :update, :id => "1"
#        response.should render_template("edit")
#      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested assertion" do
      Assertion.stub(:find).with("37") { mock_assertion }
    #  mock_assertion.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the assertions list" do
      Assertion.stub(:find) { mock_assertion }
      delete :destroy, :id => "1"
    #  response.should redirect_to(assertions_url)
    end
  end

end
