require 'RMagick'
include Magick

class Fig < ActiveRecord::Base

belongs_to :paper
has_many :figsections, :dependent => :destroy
has_many :assertions, :dependent => :destroy
has_many :comments, :dependent => :destroy
has_many :questions, :dependent => :destroy
has_many :shares, :dependent => :destroy
has_many :sumreqs, :dependent => :destroy
has_many :reactions, :as => :about, :dependent => :destroy
has_many :visits, :as => :about, :dependent => :destroy
validates :paper_id, :presence => true

image_accessor :image

def latest_assertion
     assert_list = self.assertions.sort{|x,y| x.created_at <=> y.created_at}
     assert_list.sort!{|x,y| x.votes.count <=> y.votes.count}
     assert_list.last
end

def meta_comments
	meta_comments = []
	meta_comments << self.comments
	figsections.each do |s|
		meta_comments << s.comments
	end
	meta_comments.flatten!
        meta_comments.sort!{|x,y| x.created_at <=> y.created_at}
	meta_comments.sort!{|x,y| y.votes.count <=> x.votes.count}
end 

def build_figsections(numsections)
   	if numsections == 0
     		nosections = true
   	else
     		newsections = numsections.to_i - self.figsections.count
		if newsections > 0
     			newsections.times do |i|
      				self.figsections.create(:num => (self.figsections.count+1))
			end
			self.paper.reset_heatmap
		end
		numsections
	end
end

def heat
   heat = comments.count
   heat += questions.count
   heat += assertions.count
   heat += reactions.count
   comments.each do |c|
     heat += c.comments.count
   end
   questions.each do |q|
     heat += q.questions.count
     heat += q.comments.count
   end
   heat
end

def get_paper
   	self.paper
end

def jquery_target
   	'div#fig' + id.to_s
end

def shortname
    	"Fig " + num.to_s
end

def longname
    	"Fig " + num.to_s + " of " + paper.title
end

def inspect
	"fig" + id.to_s
end

# Get this to work later
#def thumbnail_image
#	fig = ImageList.new('http://localhost:3000' + image.thumb('150x150').url)
#	mag = ImageList.new('http://localhost:3000/images/' + 'magnifying_glass.png')
#	mag.gravity=SouthEastGravity
#	mag_on_fig = fig.composite_layers(mag, Magick::OverCompositeOp)
#	mag_on_fig.format = 'jpeg'
#	send_data mag_on_fig.to_blob, :stream => â€˜falseâ€™, :filename => 'thumb.jpg', :type => 'image/jpeg', :disposition => 'inline'
#end

end
