require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe PapersController do

  def mock_paper(stubs={})
    @mock_paper ||= mock_model(Paper, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all papers as @papers" do
      Paper.stub(:all) { [mock_paper] }
      get :index
      assigns(:papers).should eq([mock_paper])
    end
  end

  describe "GET show" do
    it "assigns the requested paper as @paper" do
      Paper.stub(:find).with("37") { mock_paper }
      get :show, :id => "37"
      assigns(:paper).should be(mock_paper)
    end
  end


  describe "admin function" do
  
     before(:each) do
        @admin = Factory(:user, :email => "admin@example.com", :admin => true)
        test_sign_in(@admin)
     end

     describe "GET new" do
       it "assigns a new paper as @paper" do
         Paper.stub(:new) { mock_paper }
         get :new
         assigns(:paper).should be(mock_paper)
       end
     end

     describe "GET edit" do
        it "assigns the requested paper as @paper" do
          Paper.stub(:find).with("37") { mock_paper }
          get :edit, :id => "37"
          assigns(:paper).should be(mock_paper)
        end
     end

     describe "with valid params" do
        it "assigns a newly created paper as @paper" do
          Paper.stub(:new).with({'these' => 'params'}) { mock_paper(:save => true) }
          post :create, :paper => {'these' => 'params'}
          assigns(:paper).should be(mock_paper)
        end

        it "redirects to the created paper" do
          Paper.stub(:new) { mock_paper(:save => true) }
          post :create, :paper => {}
          response.should redirect_to(paper_url(mock_paper))
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved paper as @paper" do
          Paper.stub(:new).with({'these' => 'params'}) { mock_paper(:save => false) }
          post :create, :paper => {'these' => 'params'}
          assigns(:paper).should be(mock_paper)
        end

        it "re-renders the 'new' template" do
          Paper.stub(:new) { mock_paper(:save => false) }
          post :create, :paper => {}
          response.should render_template("new")
        end
      end

      describe "PUT update" do
        describe "with valid params" do
          it "updates the requested paper" do
            Paper.stub(:find).with("37") { mock_paper }
            mock_paper.should_receive(:update_attributes).with({'these' => 'params'})
            put :update, :id => "37", :paper => {'these' => 'params'}
          end

          it "assigns the requested paper as @paper" do
            Paper.stub(:find) { mock_paper(:update_attributes => true) }
            put :update, :id => "1"
            assigns(:paper).should be(mock_paper)
          end

          it "redirects to the paper" do
            Paper.stub(:find) { mock_paper(:update_attributes => true) }
            put :update, :id => "1"
            response.should redirect_to(paper_url(mock_paper))
          end
        end

        describe "with invalid params" do
          it "assigns the paper as @paper" do
            Paper.stub(:find) { mock_paper(:update_attributes => false) }
            put :update, :id => "1"
            assigns(:paper).should be(mock_paper)
          end

          it "re-renders the 'edit' template" do
            Paper.stub(:find) { mock_paper(:update_attributes => false) }
            put :update, :id => "1"
            response.should render_template("edit")
          end
        end
      end

      describe "DELETE destroy" do
        it "destroys the requested paper" do
          Paper.stub(:find).with("37") { mock_paper }
          mock_paper.should_receive(:destroy)
          delete :destroy, :id => "37"
        end

        it "redirects to the papers list" do
          Paper.stub(:find) { mock_paper }
            delete :destroy, :id => "1"
          response.should redirect_to(papers_url)
        end
      end
    end
end
